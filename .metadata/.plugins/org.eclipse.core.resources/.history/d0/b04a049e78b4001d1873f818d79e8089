package com.banco.projeto.testeturing.services;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.banco.projeto.testeturing.DTO.AccountDTO;
import com.banco.projeto.testeturing.DTO.UserDTO;
import com.banco.projeto.testeturing.entities.Account;
import com.banco.projeto.testeturing.entities.User;
import com.banco.projeto.testeturing.exceptions.BusinessRulesException;
import com.banco.projeto.testeturing.repositories.AccountRepository;

@Service
public class AccountService {

	@Autowired
	private AccountRepository repository;

	public List<AccountDTO> findAll() {
		List<Account> list = repository.findAll();
		List<AccountDTO> listAccountDTO = new ArrayList<>();

		for (Account account : list) {
			listAccountDTO.add(new AccountDTO(account));
		}

		return listAccountDTO;
	}

	public int accountValidation(int account) {
		int userId = repository.findUserIdByAccount(account);

		return userId;
	}

	public Double deposit(Double value, int accounNumber) {

		AccountDTO accountDto = repository.findUserAccountByAccountNumber(accounNumber);
	
		System.out.println(accountDto);
		/*if (value <= 0) {
			throw new BusinessRulesException("Valor de depósito inválido");
		}*/

		accountDto.setSaldoConta(accountDto.getSaldoConta() + value);
		
		Account accountUpdate = new Account(accountDto);
		repository.save(accountUpdate);

		//repository.saveNewSaldoConta(value, accounNumber);

		return accountDto.getSaldoConta();

	}

}
